/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ifraytek.android.tools.app;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.SwingWorker;
import org.ifraytek.android.tools.Copier;
import org.ifraytek.android.tools.Copiers;
import org.ifraytek.android.tools.events.CopierEventObject;
import org.ifraytek.android.tools.events.CopierListener;

/**
 *
 * @author IFELERE
 */
public class UiFrame extends javax.swing.JFrame {
    private Properties settings;
   
    private final JobListModel listModel;

    /**
     * Creates new form UiFrame
     */
    public UiFrame() {
        initComponents();
        listModel = new JobListModel();
        lstHistory.setModel(listModel);
    }
    
    private static File getSettingsFile() {
        String folder = ".adroid_resource_copier";
        String user = System.getProperty("user.home");
        File f = new File(user, folder);
        if (!f.exists()) {
            f.mkdir();
        }
        return new File(f, "settings.properties");
    }
    private Properties loadSettings() {
        if (settings == null) {
            settings = new Properties();
            File f = getSettingsFile();
            if (f.exists()) {
                FileReader fr = null;
                try {
                    fr = new FileReader(f);
                    settings.load(fr);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(UiFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(UiFrame.class.getName()).log(Level.SEVERE, null, ex);
                }finally {
                    if (fr != null) {
                        try {
                            fr.close();
                        } catch (IOException ex) {
                            Logger.getLogger(UiFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }
        return settings;
    }
    private String getSettingValue(String key) {
        Properties p = loadSettings();
        if (p.containsKey(key)) {
            return p.getProperty(key);
        }
        return null;
    }
    
    private void updateSetting(String key, String value) {
        Properties p = loadSettings();
        p.setProperty(key, value);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstHistory = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnRemove = new javax.swing.JButton();
        btnRemoveAll = new javax.swing.JButton();
        btnRunAll = new javax.swing.JButton();
        btnRetry = new javax.swing.JButton();
        txtClearLog = new javax.swing.JButton();
        chkReplace = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        itemSingle = new javax.swing.JMenuItem();
        itemFolder = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Android Resource Copier");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane1.setDividerLocation(200);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("History"));

        lstHistory.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstHistory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        lstHistory.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstHistoryValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstHistory);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(700, 100));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        btnRemove.setText("Remove");
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemove);

        btnRemoveAll.setText("Remove All");
        btnRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemoveAll);

        btnRunAll.setText("Run All");
        btnRunAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunAllActionPerformed(evt);
            }
        });
        jPanel2.add(btnRunAll);

        btnRetry.setText("Run");
        btnRetry.setEnabled(false);
        btnRetry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetryActionPerformed(evt);
            }
        });
        jPanel2.add(btnRetry);

        txtClearLog.setText("Clear Log");
        txtClearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClearLogActionPerformed(evt);
            }
        });
        jPanel2.add(txtClearLog);

        chkReplace.setText("Replace Existing");
        jPanel2.add(chkReplace);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createTitledBorder("Output")));

        txtLog.setEditable(false);
        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane3.setViewportView(txtLog);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel1);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        jMenu1.setMnemonic('N');
        jMenu1.setText("Import");

        itemSingle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        itemSingle.setText("File");
        itemSingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSingleActionPerformed(evt);
            }
        });
        jMenu1.add(itemSingle);

        itemFolder.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_MASK));
        itemFolder.setText("Folder");
        itemFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFolderActionPerformed(evt);
            }
        });
        jMenu1.add(itemFolder);

        fileMenu.add(jMenu1);
        fileMenu.add(jSeparator1);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");
        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        setVisible(false);
        dispose();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void txtClearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClearLogActionPerformed
        txtLog.setText(null);
    }//GEN-LAST:event_txtClearLogActionPerformed

    private void btnRetryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetryActionPerformed
        submitJob(listModel.getElementAt(lstHistory.getSelectedIndex()));
    }//GEN-LAST:event_btnRetryActionPerformed

    private void lstHistoryValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstHistoryValueChanged
        btnRetry.setEnabled(lstHistory.getSelectedIndex() != -1);
        btnRemove.setEnabled(btnRetry.isEnabled());
    }//GEN-LAST:event_lstHistoryValueChanged

    private void itemSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSingleActionPerformed
        doNew(true);
    }//GEN-LAST:event_itemSingleActionPerformed

    private void itemFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFolderActionPerformed
        doNew(false);
    }//GEN-LAST:event_itemFolderActionPerformed

    private void btnRunAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunAllActionPerformed
        doRunAll();
    }//GEN-LAST:event_btnRunAllActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        doRemove();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllActionPerformed
        listModel.clear();
    }//GEN-LAST:event_btnRemoveAllActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (settings != null) {
            FileWriter fw = null;
            try {
                File f = getSettingsFile();
                fw = new FileWriter(f);
                settings.store(fw, "");
            } catch (IOException ex) {
                Logger.getLogger(UiFrame.class.getName()).log(Level.SEVERE, null, ex);
            }finally {
                if (fw != null) {
                    try {
                        fw.close();
                    } catch (IOException ex) {
                        Logger.getLogger(UiFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void addToLog(String str) {
        txtLog.append(str + System.lineSeparator());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UiFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveAll;
    private javax.swing.JButton btnRetry;
    private javax.swing.JButton btnRunAll;
    private javax.swing.JCheckBox chkReplace;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem itemFolder;
    private javax.swing.JMenuItem itemSingle;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JList lstHistory;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton txtClearLog;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables

    private void doNew(boolean single) {
        String s = getSettingValue("source.dir");
        
        CopyJobDialog dlg = new CopyJobDialog(this, true);
        if (s != null && s.length() > 0) {
            CopyJobDialog.setCurrentSourceDir(new File(s));
        }
        s = getSettingValue("dest.dir");
        if (s != null && s.length() > 0) {
            CopyJobDialog.setCurrentDestinationDir(new File(s));
        }
        dlg.setFolderSourceOnly(!single);
        dlg.setLocationRelativeTo(this);
        dlg.setVisible(true);
        if (dlg.getDialogResult() == CopyJobDialog.DIALOG_OK) {
            updateSetting("source.dir", CopyJobDialog.getCurrentSourceDir().getAbsolutePath());
            updateSetting("dest.dir", CopyJobDialog.getCurrentDestinationDir().getAbsolutePath());
            try {
                if (single) {
                    Copier c = Copiers.createDrawable(dlg.getSource(), dlg.getDestination());
                    listModel.add(new JobModel(c));
                } else {
                    File[] zippedFolders = dlg.getSource().listFiles(new FileFilter() {

                        @Override
                        public boolean accept(File pathname) {
                            return Copiers.isZippedFile(pathname);
                        }
                    });
                    for (File f : zippedFolders) {
                        Copier c = Copiers.createDrawable(f, dlg.getDestination());
                        listModel.add(new JobModel(c));
                    }
                }
                //submitJob(c);
            } catch (IOException ex) {
                addToLog("ERROR: " + ex.getMessage());
                Logger.getLogger(UiFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void submitJob(JobModel c) {
        if (c.isBusy()) {
            if (queue == null) {
                queue = new ConcurrentLinkedQueue<>();
            }
            queue.add(c);
            return;
        }
        
        c.copier.setOverwrite(chkReplace.isSelected());
        
        final JobTask t = new JobTask(c);
        t.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("state".equals(evt.getPropertyName())) {
                    SwingWorker.StateValue v = (SwingWorker.StateValue) evt.getNewValue();
                    if (v == SwingWorker.StateValue.DONE) {
                        notifyComplete(t);
                    }
                }
            }
        });
        t.execute();
    }
    private java.util.Queue<JobModel> queue;

    private void notifyComplete(JobTask task) {
        if (queue != null && !queue.isEmpty()) {
            JobModel m = queue.poll();
            m.copier.setOverwrite(chkReplace.isSelected());
            task.setModel(m);
            task.execute();
        }
    }

    private void doRunAll() {
        if (listModel.getSize() == 0) {
            return;
        }
        txtLog.setText(null);
        btnRunAll.setEnabled(false);
        btnRetry.setEnabled(false);
        lstHistory.setEnabled(false);
        btnRemove.setEnabled(false);
        BatchTasks t = new BatchTasks();
        t.setReplace(chkReplace.isSelected());
        t.run();
    }

    private void doRemove() {
        this.listModel.removeIndices(lstHistory.getSelectedIndices());
    }


    private class BatchTasks implements Runnable, java.beans.PropertyChangeListener {

        private int index = -1;
        private boolean replace;

        public boolean isReplace() {
            return replace;
        }

        public void setReplace(boolean replace) {
            this.replace = replace;
        }
        
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if ("state".equals(evt.getPropertyName())) {
                SwingWorker.StateValue sv = (SwingWorker.StateValue) evt.getNewValue();
                if (sv == SwingWorker.StateValue.DONE) {
                    this.run();
                }
            }
        }

        @Override
        public void run() {
            if (this.hasNext()) {
                JobModel m = this.getNext();
                m.copier.setOverwrite(replace);
                JobTask t = new JobTask(m);
                t.addPropertyChangeListener(this);
                t.execute();
            } else {
                btnRunAll.setEnabled(true);
                lstHistory.setEnabled(true);
            }
        }

        boolean hasNext() {
            return (index + 1 < listModel.getSize());
        }

        JobModel getNext() {
            return listModel.getElementAt(++index);
        }

    }

    private class JobTask extends SwingWorker<Void, String> implements CopierListener {

        private JobModel copier;

        public JobTask(JobModel copier) {
            this.copier = copier;
        }

        public void setModel(JobModel model) {
            this.copier = model;
        }

        @Override
        protected Void doInBackground() throws Exception {
            this.copier.setBusy(true);
            this.copier.getCopier().addCopierListener(this);
            this.publish(String.format("Processing %s...", this.copier.getCopier().getSource().getPath()));
            this.copier.getCopier().run();
            this.copier.getCopier().removeCopierListener(this);
            this.publish("===============Done...======================");
            return null;
        }

        @Override
        protected void done() {
            super.done();
            this.copier.setBusy(false);
        }

        @Override
        public void onResourceCopied(CopierEventObject e) {
            this.publish(String.format("Copied: %s -> %s", e.getSourceResource(), e.getDestination()));
        }

        @Override
        public void onResourceSkipped(CopierEventObject e) {
            this.publish(String.format("Skipped: %s", e.getSourceResource()));
        }

        @Override
        public void onErrorOccured(CopierEventObject e) {
            this.publish("ERROR: " + (e.getError().getMessage()));
        }

        @Override
        protected void process(List<String> chunks) {
            for (String s : chunks) {
                addToLog(s);
            }
        }
    }

    private static class JobModel {

        private final Copier copier;
        private volatile boolean busy;

        public JobModel(Copier copier) {
            this.copier = copier;
        }

        public synchronized boolean isBusy() {
            return busy;
        }

        public synchronized void setBusy(boolean busy) {
            this.busy = busy;
        }

        @Override
        public String toString() {
            return this.copier.getSource().getName();
        }

        public Copier getCopier() {
            return copier;
        }

    }

    private static class JobListModel extends AbstractListModel<JobModel> {

        private final ArrayList<JobModel> jobs;

        public JobListModel() {
            jobs = new ArrayList<>();
        }

        public void add(JobModel model) {
            this.jobs.add(model);
            int idx = this.jobs.size();
            this.fireIntervalAdded(this, idx - 1, idx - 1);
        }
        public void clear() {
            int size = this.jobs.size();
            if (size > 0) {
                this.jobs.clear();
                 this.fireIntervalRemoved(this, 0, size - 1);
            }
        }
        public void removeAt(int index) {
            this.jobs.remove(index);
            this.fireIntervalRemoved(this,
                    index, index);
        }
        
        public void removeIndices(int[] indices) {
            Arrays.sort(indices);
            int count = 0;
            for (int i : indices) {
                this.jobs.remove(i - (count++));
            }
            this.fireIntervalRemoved(this, indices[0], indices[indices.length - 1]);
        }

        @Override
        public int getSize() {
            return jobs.size();
        }

        @Override
        public JobModel getElementAt(int index) {
            return jobs.get(index);
        }

    }
}
